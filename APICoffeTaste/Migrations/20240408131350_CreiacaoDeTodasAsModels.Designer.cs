// <auto-generated />
using APICoffeeTaste.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APICoffeeTaste.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240408131350_CreiacaoDeTodasAsModels")]
    partial class CreiacaoDeTodasAsModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APICoffeeTaste.Models.CafesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MetodoId")
                        .HasColumnType("int");

                    b.Property<string>("Variacao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetodoId");

                    b.ToTable("Cafes");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.CoffeeSprintsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoffeeSprints");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.HotDrinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HotDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IcedDrinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IcedDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsCoffeeSprintsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoffeeSprintsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeSprintsId");

                    b.ToTable("IngredientsCoffeeSprints");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsHotDrinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HotDrinksId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotDrinksId");

                    b.ToTable("IngredientesHotDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsIcedDrinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IcedDrinksId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IcedDrinksId");

                    b.ToTable("IngredientesIcedDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsSoftDrinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("SoftDrinksId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SoftDrinksId");

                    b.ToTable("IngredientsSoftDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsTeasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("TeasId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeasId");

                    b.ToTable("IngredientsTeas");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.MetodosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Metodos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Metodos");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.ReceitasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CafeId")
                        .HasColumnType("int");

                    b.Property<float>("Granulometria")
                        .HasColumnType("real");

                    b.Property<float>("QuantidadeDeAgua")
                        .HasColumnType("real");

                    b.Property<float>("QuantidadeDeCafe")
                        .HasColumnType("real");

                    b.Property<int>("Temperatura")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CafeId")
                        .IsUnique();

                    b.ToTable("Receitas");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.SoftDrinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SoftDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.TeasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teas");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.CafesModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.MetodosModel", "Metodo")
                        .WithMany("Cafes")
                        .HasForeignKey("MetodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metodo");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsCoffeeSprintsModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.CoffeeSprintsModel", "CoffeeSprints")
                        .WithMany("Ingredientes")
                        .HasForeignKey("CoffeeSprintsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeSprints");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsHotDrinksModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.HotDrinksModel", "HotDrinks")
                        .WithMany("Ingredientes")
                        .HasForeignKey("HotDrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsIcedDrinksModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.IcedDrinksModel", "IcedDrinks")
                        .WithMany("Ingredientes")
                        .HasForeignKey("IcedDrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IcedDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsSoftDrinksModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.SoftDrinksModel", "SoftDrinks")
                        .WithMany("Ingredientes")
                        .HasForeignKey("SoftDrinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoftDrinks");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IngredientsTeasModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.TeasModel", "Teas")
                        .WithMany("Ingredientes")
                        .HasForeignKey("TeasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teas");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.ReceitasModel", b =>
                {
                    b.HasOne("APICoffeeTaste.Models.CafesModel", "Cafe")
                        .WithOne("Receita")
                        .HasForeignKey("APICoffeeTaste.Models.ReceitasModel", "CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cafe");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.CafesModel", b =>
                {
                    b.Navigation("Receita");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.CoffeeSprintsModel", b =>
                {
                    b.Navigation("Ingredientes");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.HotDrinksModel", b =>
                {
                    b.Navigation("Ingredientes");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.IcedDrinksModel", b =>
                {
                    b.Navigation("Ingredientes");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.MetodosModel", b =>
                {
                    b.Navigation("Cafes");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.SoftDrinksModel", b =>
                {
                    b.Navigation("Ingredientes");
                });

            modelBuilder.Entity("APICoffeeTaste.Models.TeasModel", b =>
                {
                    b.Navigation("Ingredientes");
                });
#pragma warning restore 612, 618
        }
    }
}
